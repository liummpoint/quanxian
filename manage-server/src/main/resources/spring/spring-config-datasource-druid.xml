<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<bean id="dataSourceWrite" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<constructor-arg index="0" value="${mysql.desDecrpt}" />
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${mysql.write.url}" />
		<property name="username" value="${mysql.write.username}" />
		<property name="password" value="${mysql.write.password}" />
		<property name="driverClassName" value="${mysql.write.driverClassName}" />
		<property name="filters" value="${mysql.filters}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${mysql.maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${mysql.initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${mysql.maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${mysql.minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${mysql.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${mysql.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${mysql.validationQuery}" />
		<property name="testWhileIdle" value="${mysql.testWhileIdle}" />
		<property name="testOnBorrow" value="${mysql.testOnBorrow}" />
		<property name="testOnReturn" value="${mysql.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${mysql.maxOpenPreparedStatements}" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${mysql.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${mysql.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${mysql.logAbandoned}" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.manage.dao"/>
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mapper/mybatis.cfg.xml"></property>
		<property name="typeAliasesPackage" value="com.manage.model"/>
		<property name="mapperLocations" value="classpath*:**/*Mapper.xml"/>
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" />
			<tx:method name="save*" />
			<tx:method name="insert*" />
			<tx:method name="update*" />
			<tx:method name="modify*" />
			<tx:method name="edit*" />
			<tx:method name="delete*" />
			<tx:method name="remove*" />
			<tx:method name="repair" />
			<tx:method name="deleteAndRepair" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<!-- 这里是针对我写的判断用户是否存在数据库的方法的事务，如果不配置的话就会出现no session异常 -->
			<tx:method name="is*" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>


	<!-- Spring AOP config 解释一下 (* com.evan.crm.service.*.*(..)) 中几个通配符的含义： -->
	<!-- 第一个 * —— 通配 任意返回值类型 -->
	<!-- 第二个 * —— 通配 包com.evan.crm.service下的任意class -->
	<!-- 第三个 * —— 通配包com.evan.crm.service下的任意class的任意方法 -->
	<!-- 第四个 .. —— 通配 方法可以有0个或多个参数 -->
	<!-- 事务控制位置，一般在业务层service -->
	<aop:aspectj-autoproxy proxy-target-class="true" />  
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.manage.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"  order="2"/>
	</aop:config>
	
	
	
	<bean id="dataSourceRead" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${mysql.read.url}" />
		<property name="username" value="${mysql.read.username}" />
		<property name="password" value="${mysql.read.password}" />
		<property name="driverClassName" value="${mysql.read.driverClassName}" />
	</bean>
	
	  <bean id="dataSource" class="com.manage.datasourceAnnotation.DynamicDataSource">
        <property name="defaultTargetDataSource" ref="dataSourceRead" />  
        <property name="targetDataSources">  
            <map key-type="com.manage.datasourceAnnotation.SourcesEnum">
                <entry key="write" value-ref="dataSourceWrite"/>  
                <entry key="read" value-ref="dataSourceRead"/>  
                <!-- 这里还可以加多个dataSource -->  
            </map>  
        </property>  
    </bean> 
    
      
    <bean id="dataSourceAspect" class="com.manage.datasourceAnnotation.DataSourceAspect" />
    <aop:config proxy-target-class="true">      
        <aop:aspect id="dataSourceAspect" ref="dataSourceAspect" order="1">      
            <aop:pointcut id="tx" expression="execution(* com.manage.service.*.*(..))"/>
            <aop:before pointcut-ref="tx" method="before" />                  
        </aop:aspect>      
    </aop:config>  
	
</beans>